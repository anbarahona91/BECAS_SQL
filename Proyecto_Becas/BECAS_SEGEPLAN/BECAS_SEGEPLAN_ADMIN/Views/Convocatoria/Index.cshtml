@using DevExtreme.AspNet.Mvc


@(Html.DevExtreme().DataGrid<BECAS_SEGEPLAN_DATA.Models.Convocatorium>()
    .DataSource(ds => ds.Mvc()
        .Controller("ConvocatoriaApi")
        .LoadAction("Get")
        .InsertAction("Insert")
        .UpdateAction("Update")
        .UpdateMethod("POST")
        .DeleteAction("Delete")
        .DeleteMethod("POST")
        .Key("idconvocatoria")
    )
    .RemoteOperations(true)
    .Columns(columns => {

        columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width(110)
            .Buttons(b => {
                b.Add().Name(GridColumnButtonName.Edit).Text("Editar");
                b.Add().Name(GridColumnButtonName.Delete).Text("Eliminar");
            });


        columns.AddFor(m => m.Idcooperante)
             .SetCellValue("setStateValue")
             .Lookup(lookup => lookup
                .DataSource(d => d.Mvc().Controller("CooperatenApi").LoadAction("Get").Key("idcooperante"))
                .ValueExpr("idcooperante")
				.DisplayExpr("nombre")
            ).DataField("idcooperante").Caption("Cooperante");

        columns.AddFor(m => m.IdprogramaAcademico)
             .Lookup(lookup => lookup
                .DataSource("getCities")
                .ValueExpr("idprogramaAcademico")
				.DisplayExpr("nombre")
            ).DataField("idprogramaAcademico").Caption("Programa académico");
        
        columns.AddFor(m=>m.Codigo).DataField("codigo").Width("10%").Caption("Código");
        columns.AddFor(m=>m.Nombre).DataField("nombre");
        columns.AddFor(m=>m.Descripcion).DataField("descripcion").Visible(false);
       

        
        columns.AddFor(m => m.IdmodalidadPrograma)
             .Lookup(lookup => lookup
                .DataSource(d => d.Mvc().Controller("ModalidadProgramaApi").LoadAction("Get").Key("idmodalidadPrograma"))
                .ValueExpr("idmodalidadPrograma")
				.DisplayExpr("nombre")
            ).DataField("idmodalidadPrograma").Caption("Modalidad").Visible(false);

        columns.AddFor(m=>m.Dirigido).DataField("dirigido").Visible(false);
        columns.AddFor(m=>m.AvalSegeplan).DataField("avalSegeplan").Visible(false);
        columns.AddFor(m=>m.Finabece).DataField("finabece").Visible(false);
        columns.AddFor(m=>m.Contraparte).DataField("contraparte").Visible(false);
        columns.AddFor(m=>m.InstitucionProponente).DataField("institucionProponente").Visible(false);
        columns.AddFor(m=>m.FechaInicioAplicacion).DataField("fechaInicioAplicacion").Visible(false);
        columns.AddFor(m=>m.FechaFinAplicacion).DataField("fechaFinAplicacion").Visible(false);
        columns.AddFor(m=>m.RequisitoEdad).DataField("requisitoEdad").Visible(false);
        columns.AddFor(m=>m.Nacionalidad).DataField("nacionalidad").Visible(false);
        columns.AddFor(m=>m.DuracionAnio).DataField("duracionAnio").Visible(false).Caption("Duración Años");
        columns.AddFor(m=>m.DuracionMes).DataField("duracionMes").Visible(false).Caption("Duración Meses");
        columns.AddFor(m=>m.DuracionSemana).DataField("duracionSemana").Visible(false).Caption("Duración Semanas");
        columns.AddFor(m=>m.DuracionDia).DataField("duracionDia").Visible(false).Caption("Duración Días");
        columns.AddFor(m => m.IdtipoBeca)
             .Lookup(lookup => lookup
                .DataSource(d => d.Mvc().Controller("TipoBecaApi").LoadAction("Get").Key("idtipoBeca"))
                .ValueExpr("idtipoBeca")
				.DisplayExpr("nombre")
            ).DataField("idtipoBeca").Caption("Tipo Beca");
        columns.AddFor(m=>m.Observaciones).DataField("observaciones").Visible(false).Caption("Información complementaria");
        columns.AddFor(m=>m.InformacionContacto).DataField("informacionContacto").Visible(false);
        columns.AddFor(m=>m.CorreoElectronicoContacto).DataField("correoElectronicoContacto").Visible(false);
        columns.AddFor(m=>m.OtrosBeneficios).DataField("otrosBeneficios").Visible(false).Caption("Otros requisitos");
        columns.Add()
            .Type(GridCommandColumnType.Buttons)
            .Width("25%")
            .Name("BtPID")
            .Buttons(b =>
            {
                
                b.Add().Hint("Detalle").Icon("pdffile").OnClick("onFichaIconClick");
                b.Add().Hint("Publicar").Icon("upload").OnClick("onPublicarIconClick");
            }).Width(75);
    })
    .Editing(e => e.Mode(GridEditMode.Popup)
        .AllowAdding(true)
        .AllowUpdating(true)
        .AllowDeleting(true)
        .Popup(p => p
                .Title("Convocatoria")
                .ShowTitle(true)
                .FullScreen(true)
            )
        .Form(f => f.Items(items => {
                items.AddGroup()
                    .ColCount(4)
                    .ColSpan(2)
                    .Items(groupItems => {
                        groupItems.AddSimpleFor(m => m.Idcooperante).ColSpan(4).DataField("idcooperante");
                        groupItems.AddSimpleFor(m => m.IdprogramaAcademico).ColSpan(4).DataField("idprogramaAcademico");
                        groupItems.AddSimpleFor(m => m.Codigo).ColSpan(2).DataField("codigo");
                        groupItems.AddSimpleFor(m => m.IdmodalidadPrograma).ColSpan(2).DataField("idmodalidadPrograma");
                        groupItems.AddSimpleFor(m => m.Nombre).ColSpan(4).DataField("nombre");
                        groupItems.AddSimpleFor(m => m.Descripcion).ColSpan(4).Editor(editor => editor.TextArea()).DataField("descripcion");
                        groupItems.AddSimpleFor(m => m.Dirigido).ColSpan(4).Editor(editor => editor.TextArea()).DataField("dirigido");
                        groupItems.AddSimpleFor(m => m.AvalSegeplan).Editor(editor => editor.CheckBox()).DataField("avalSegeplan");
                        groupItems.AddSimpleFor(m => m.InstitucionProponente).Editor(editor => editor.CheckBox()).DataField("institucionProponente");
                        groupItems.AddSimpleFor(m => m.FechaInicioAplicacion).Editor(editor => editor.DateBox()).DataField("fechaInicioAplicacion");
                        groupItems.AddSimpleFor(m => m.FechaFinAplicacion).Editor(editor => editor.DateBox()).DataField("fechaFinAplicacion");
                        groupItems.AddSimpleFor(m => m.DuracionAnio).Label(label => label.Text("Duración en años")).DataField("duracionAnio");
                        groupItems.AddSimpleFor(m => m.DuracionMes).Label(label => label.Text("Duración en meses")).DataField("duracionMes");
                        groupItems.AddSimpleFor(m => m.DuracionSemana).Label(label => label.Text("Duración en semanas")).DataField("duracionSemana");
                        groupItems.AddSimpleFor(m => m.DuracionDia).Label(label => label.Text("Duración en días")).DataField("duracionDia");
                        groupItems.AddSimpleFor(m => m.Contraparte).Editor(editor => editor.CheckBox()).DataField("contraparte");
                        groupItems.AddSimpleFor(m => m.RequisitoEdad).DataField("requisitoEdad");
                        groupItems.AddSimpleFor(m => m.Nacionalidad).DataField("nacionalidad");
                        groupItems.AddSimpleFor(m => m.IdtipoBeca).DataField("idtipoBeca");
                        groupItems.AddSimpleFor(m => m.OtrosBeneficios).ColSpan(4).Editor(editor => editor.TextArea()).DataField("otrosBeneficios");
                        groupItems.AddSimpleFor(m => m.Observaciones).ColSpan(4).Editor(editor => editor.TextArea()).DataField("observaciones");
                        groupItems.AddSimpleFor(m => m.InformacionContacto).ColSpan(4).Editor(editor => editor.TextArea()).DataField("informacionContacto");
                        groupItems.AddSimpleFor(m => m.CorreoElectronicoContacto).DataField("correoElectronicoContacto");
                        groupItems.AddSimpleFor(m => m.Finabece).Editor(editor => editor.CheckBox()).DataField("finabece");
                    });
            }))
    )
    
    .FilterRow(filterRow => filterRow
        .Visible(true)
        .ApplyFilter(GridApplyFilterMode.Auto)
    )
    .ShowBorders(true)
    .Scrolling(scrolling => scrolling.RowRenderingMode(GridRowRenderingMode.Virtual))
    .Paging(paging => paging.PageSize(10))
    .Pager(pager => {
        pager.Visible(true);
        pager.DisplayMode(GridPagerDisplayMode.Full);
        pager.ShowPageSizeSelector(true);
        pager.AllowedPageSizes(new JS("[5, 10, 'todos']"));
        pager.ShowInfo(true);
        pager.ShowNavigationButtons(true);
    })
)

<script>
function onFichaIconClick(e) {
        window.open("/ConvocatoriaDetalle/Index/?Id=" + e.row.key, "_self");
    }

    function onPublicarIconClick(e) {
        window.open("/ConvocatoriaPublicar/Index/?Id=" + e.row.key, "_self");
    }
</script>

<script>
    function onEditorPreparing(e) {
        //alert('Si entra al método')
        if(e.parentType === "dataRow" && e.dataField === "idcooperante") {
            //alert('este es el valor' + typeof e.row.data.idcooperante )
            e.editorOptions.disabled = (typeof e.row.data.idcooperante !== "number");
        }
    }
    function getCities(options) {
        return {
            store: DevExpress.data.AspNet.createStore({
                key: "idprogramaAcademico",
                loadUrl: '@Url.Action("Get", "ProgramaAcademicoApi", new { httproute = true })'
            }),
            filter: options.data ? ["idcooperante", "=", options.data.idcooperante] : null
        };
    }
    function setStateValue(rowData, value) {
        rowData.idcooperante = value;
        rowData.idprogramaAcademico = null;
    }
</script>